기존 상속만 활용하는 경우 "날지못하는" 오리와 "삑삑 소리를 내는" 오리에 대한 추가요구사항이 있을 경우
모든 서브클래스를 하나씩 확인하여 "날지못하는" 오리와 "삑삑 소리를 내는" 오리에 대해 fly()와 quack()메소드를 오버라이딩해야 했음.
예를들어, 모든 서브클래스가 날거나 꽥꽥거리는 기능이 있어야하는 것은 아니므로 상속은 올바른 해결방법이 아님.

[해결책]
변경가능성이 있는 행동(역할,기능)을 슈퍼클래스의 메소드에서 제외하고 인터페이스로 정의
인터페이스: flyable -> fly()
인터페이스: quackable -> quack()
날 수 있는 오리는 flyable을 구현하고, 소리낼 수 있는 오리는 quackable 구현

[문제점]
1. 코드의 재사용성이 떨어짐
날 수 있는 오리들에 대해 매 번 fly()메소드를 오버라이딩해야 하기 때문. quack도 마찬가지
같은 방식으로 날고있는 오리들에 대해 "매 번 같은 내용을 구현하도록" fly()메소드를 오버라이딩 해야 함


[정리]
1. 상속을 활용할 경우의 문제점: 오리의 "행동이 바뀔 수 있는데도" 모든 서브클래스에서 한 가지 행동만 사용하도록 하는 것은 올바르지 못함
2. 인터페이스를 추가로 활용할 경우의 문제점: 코드의 재사용성이 떨어짐. 한 가지 행동이 바뀔때마다 해당 인터페이스를 구현하고 있는 모든 클래스를 찾아서 수정해야 함

[해결책]
새로운 요구 사항이 있을 때마다 "바뀌는 부분이 있다면 분리(캡슐화)"
왜?: 나중에 바뀌지 않는 부분에는 영향을 미치지 않고 그 부분만 고치거나 확장할 수 있다